#3. Есть два списка:
#tutors = [
#    'Иван', 'Анастасия', 'Петр', 'Сергей',
 #   'Дмитрий', 'Борис', 'Елена'
#]
#klasses = [
#    '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А'
#]
#Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>), например:
#('Иван', '9А')
#('Анастасия', '7В')
#...
#Количество генерируемых кортежей не должно быть больше длины списка tutors. Если в списке klasses меньше элементов, чем в списке tutors, необходимо вывести последние кортежи в виде: (<tutor>, None), например:
#('Станислав', None)
### Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения. Подумать, в каких ситуациях генератор даст эффект.
students = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = [ '9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']

together = ((students[n], klasses[n]) if len(klasses) > n else (students[n], None) for n in range(len(students)))
# ((students[i], klasses[i])) if len(klasses) > i else(students[i], None), эта строка, то из чего состоит генератор
# работа идёт в диапозоне длины списка имен.
# делаем кортежи (students[i], klasses[i]), если дина списка(classes) больше чем n(n это не каждый символ, а каждое слово)
# иначе None
print(type(together))
print(together, *together, sep ="\n") #чтобы кортежи выводились с новой строки - \n
