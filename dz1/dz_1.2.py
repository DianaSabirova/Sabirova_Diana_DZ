# 2. Создать список, состоящий из кубов нечётных чисел от 0 до 1000:
# Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
# Например, число «19 ^ 3 = 6859» будем включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится нацело на 7.
# Внимание: использовать только арифметические операции!
# К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
# Внимание: новый список не создавать!!!


# переменные с которыми мы будем работать
list_of_cubes = []  # пустой список
all_sum = 0  # переменая с конечным результатом
add_list_of_cubs = 0 # эта переменная нужна для решения второй части задачи


for i in range(1, 1000, 2):  # перебираем список, значения от 1 до 1000, нечётные
    list_of_cubes.append(i ** 3)  # добавление нового элемента в список, этот элемент возводиться в куб

#  Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.

# удобно работать имея и список, и значения- это enumerate

#первая итерация
for ind, val in enumerate(list_of_cubes):  # в ind будет сохранятся индекс, в val значение.
    sum_digits = 0  # добавляем переменную sum_digits. В неё я сохраню результат. Она будет равно 0, потому что нам нужно обнулять значения,
    # так как работать нужно с обнуленным следующим списком.
    while val > 0:  # while будет работать пока значение больше 0. Нужно стереть числа в 0
        sum_digits += val % 10 # переменная sum_digits будет увеличиваться на значение нашего числа, без последней цифры.
        # sum_digits теперь равна результату без последней цифры
        val //= 10 # удвляем последнюю цифру
    if sum_digits % 7 == 0: # проверяем делиться ли на 7 без остатка
         # val значения стерты в 0, но мы ещё имеем сохраненный список по индексу ind, так как мы его упомянули в начале
         all_sum += list_of_cubes[ind] # обращаемся к списку по индексу, сумма цифр которых делется без осатка на 7 будет равна all_sum
         print(all_sum)


#К каждому элементу списка добавить 17
for m in list_of_cubes:
    add_list_of_cubs.append(m + 17)

    all_sum = 0 # нужно обнулить all_sum, чтобы список был пустой, так как нужно опять проверить делиться ли число на 7

for ind, val in enumerate(add_list_of_cubes):  # в ind будет сохранятся индекс, в val значение.
    sum_digits = 0  # добавляем переменную sum_digits. В неё я сохраню результат. Она будет равно 0, потому что нам нужно обнулять значения,
    # так как работать нужно с обнуленным следующим списком.
    while val > 0:  # while будет работать пока значение больше 0. Нужно стереть числа в 0
        sum_digits += val % 10 # переменная sum_digits будет увеличиваться на значение нашего числа, без последней цифры.
        # sum_digits теперь равна результату без последней цифры
        val //= 10 # удвляем последнюю цифру
    if sum_digits % 7 == 0: # проверяем делиться ли на 7 без остатка
         # val значения стерты в 0, но мы ещё имеем сохраненный список по индексу ind, так как мы его упомянули в начале
         all_sum += add_list_of_cubes[ind] # обращаемся к списку по индексу, сумма цифр которых делется без осатка на 7 будет равна all_sum

         print(all_sum)




















